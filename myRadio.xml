<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="myRadio"
               author="myRadio team"
               height="800"
               scrolling="true">
    <Locale messages="http://my-radio.googlecode.com/svn/trunk/lang/ALL_ALL.xml" />
  </ModulePrefs>
  <Content type="html">
  <![CDATA[
    <button onclick="updateRadioList(_gel('radio_list'));">Forza!</button>
    <label>
      __MSG_select_station__
      <select id="radio-list" onchange="changeStation(_gel('gadget'), this);"></select>
    </label>

    <iframe id="gadget" src="" style="width: 100%;"></iframe>

    
    <script type="text/javascript">
      var radioList = _gel('radio-list');

/**
 * File contains code for searching the Google gadgets directory.
 */

var RSS_BASE_URL = 'http://www.google.com/ig/directory?sort=popular&output=rss';

var FEATURED_GADGETS_URL = RSS_BASE_URL + '&cat=featured&hl=en&gl=us';

/**
 * Returns an array of objects representing gadgets. Keys in the objects are:
 *   link, guid, title, description, thumbnail, ghapi:type
 * ... and corresponds to the nodes with the same names in the RSS feed.
 */
function getRadioGadgets(callback, eachCallback) {
  console.log('fetching gadgets');
  var rssUrl = buildSearchUrl("radio");
  var doCallback = typeof(callback) == 'function';
  var doEachCallback = typeof(eachCallback) == 'function';

  if (!doCallback || !doEachCallback) {
    return;
  }

  _IG_FetchXmlContent(rssUrl, function(response) {
    if (!response || !response.firstChild) {
      if (doCallback) {
        callback([]);
      }
    }

    var nodes = [
        'link', 
        'guid', 
        'title', 
        'description',
        'thumbnail',
        'ghapi:type'];
    var gadgets = [];
    var items = response.getElementsByTagName('item');

    for (var i = 0; i < items.length; ++i) {
      console.log('getting an item: ', i);
      var item = items.item(i);
      var gadget = {};

      // for (var n = 0, node; node = nodes[i]; ++n) {
      for (var n in nodes) {
        var node = nodes[n];
        gadget[node] = getNodeValue(item, node);
        console.debug(gadget);
      }

      if (doEachCallback) {
        eachCallback(gadget);
      }

      if (doCallback) {
        gadgets.push(gadget);
      }
    }

    if (doCallback)
      callback(gadgets);
  });
}


/**
 * Builds the URI to ask for a list of radio stations.
 */
function buildSearchUrl(searchQuery) {
  return RSS_BASE_URL + '&q=' + searchQuery;
}

/**
 * Extracts the value from an XML node that has only one (text) child.
 */
function getNodeValue(item, nodeName, opt_defaultValue) {
  try {
    return item.getElementsByTagName(nodeName).item(0).firstChild.nodeValue;
  } catch (e) {
    return opt_defaultValue || '';
  }
}

/**
 * Returns whether an item is a feed or not.
 */
function isFeed(item) {
  return item['ghapi:type'] == 'feed';
}

/**
 * Builds the URL used to embed a gadget.
 */
function createEmbedGadgetUrl(gadgetXmlUrl) {
  return 'http://www.gmodules.com/ig/ifr?url=' + gadgetXmlUrl +
      ['', 'w=320', 'h=60', 'output=iframe'].join('&amp;');
}


function updateRadioList(radioList) {
  getRadioGadgets(null, function (gadgetItem) {
    if (!isFeed(gadgetItem)) {
      radioList.appendChild(createOptionElement(gadgetItem));
    }
  });
}

function createOptionElement(gadgetItem) {
  var element = document.createElement('option');
  element.setAttribute('value', gadgetItem.guid);
  element.appendChild(document.createTextNode(gadgetItem.title));
  return element;
}

function updateStation(radioList, radio) {
  radio.setAttribute('src', createEmbedGadgetUrl(radioList[radioList.selectedIndex].value));
}

_IG_RegisterOnloadHandler(function() {
  console.log('registered onload handler');
  updateRadioList(_gel('radio-list'));
});
    </script>
    ]]>
  </Content>
</Module>

